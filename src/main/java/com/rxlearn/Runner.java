package com.rxlearn;

import io.reactivex.Observable;

public class Runner {
    Observable<Producer> o = Observable.create(s -> {
        s.onNext(new Producer());
    });

    Observable<Long> o2 = Observable.create(s -> {
        o.subscribe(p -> { // Immediately subscribes to the observable that produces the thread --- Subscribing provides the producer instance which is a child of the Thread class
            p.start(); // This starts the producer thread and immediately logs the List to the console
            p.getL().stream().forEach(l -> {
                s.onNext(l); // It is necessary that the producer thread be started prior to calling onNext() so the values could be returned to the getL() method of the producer class and then each of its item pulled by the Observable in each loop 
            });
        });
    });

    Observable<Long> o3 = o2.filter(l -> !(l < 0));

    Observable<String> o4 = o3.map(l -> String.format("%s as a string", l.toString()));
    
    public void run() {
        o.subscribe(p -> p.start()); // Another subscription made to the first observable. The values of the List generated by the producer provided by the Observable during this subscription are pulled by the second Observable as an entirely new result is returned to the getL() method. The same producer is provided but started again as a different Thread which produces new results.
        o2.subscribe(l -> System.out.println(l)); // Subscribes to log the item provided by second Observable
        o3.subscribe(l -> System.out.println(l)); // Produces the filtered result of the second observable
        o4.subscribe(s -> System.out.println(s));
    }
}